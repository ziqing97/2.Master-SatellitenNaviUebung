function BaseAlloy1Hzonline = importfile1(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   BASEALLOY1HZONLINE = IMPORTFILE1(FILENAME)
%   Reads data from text file FILENAME for the default selection.
%
%   BASEALLOY1HZONLINE = IMPORTFILE1(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   BaseAlloy1Hzonline = importfile1('Base_Alloy_1Hz_online.pos', 7, 43);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/07/16 01:18:34

%% Initialize variables.
if nargin<=2
    startRow = 7;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%3s%6s%5s%12s%11s%12s%4s%5s%8s%8s%14s%14s%14s%11s%11s%11s%6s%6s%9s%6s%6s%9s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{6} = strtrim(dataArray{6});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
    % Converts text in the input cell array to numbers. Replaced non-numeric text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]);
rawStringColumns = string(raw(:, [1,3,5,6]));


%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
BaseAlloy1Hzonline = table;
BaseAlloy1Hzonline.DIR = categorical(rawStringColumns(:, 1));
BaseAlloy1Hzonline.FRAME = cell2mat(rawNumericColumns(:, 1));
BaseAlloy1Hzonline.STN = categorical(rawStringColumns(:, 2));
BaseAlloy1Hzonline.DAYofYEAR = cell2mat(rawNumericColumns(:, 2));
BaseAlloy1Hzonline.YEARMMDD = categorical(rawStringColumns(:, 3));
BaseAlloy1Hzonline.HRMNSSSS = rawStringColumns(:, 4);
BaseAlloy1Hzonline.NSV = cell2mat(rawNumericColumns(:, 3));
BaseAlloy1Hzonline.GDOP = cell2mat(rawNumericColumns(:, 4));
BaseAlloy1Hzonline.RMSCm = cell2mat(rawNumericColumns(:, 5));
BaseAlloy1Hzonline.RMSPm = cell2mat(rawNumericColumns(:, 6));
BaseAlloy1Hzonline.DLATm = cell2mat(rawNumericColumns(:, 7));
BaseAlloy1Hzonline.DLONm = cell2mat(rawNumericColumns(:, 8));
BaseAlloy1Hzonline.DHGTm = cell2mat(rawNumericColumns(:, 9));
BaseAlloy1Hzonline.SDLAT95 = cell2mat(rawNumericColumns(:, 10));
BaseAlloy1Hzonline.SDLON95 = cell2mat(rawNumericColumns(:, 11));
BaseAlloy1Hzonline.SDHGT95 = cell2mat(rawNumericColumns(:, 12));
BaseAlloy1Hzonline.LATDD = cell2mat(rawNumericColumns(:, 13));
BaseAlloy1Hzonline.LATMN = cell2mat(rawNumericColumns(:, 14));
BaseAlloy1Hzonline.LATSS = cell2mat(rawNumericColumns(:, 15));
BaseAlloy1Hzonline.LONDD = cell2mat(rawNumericColumns(:, 16));
BaseAlloy1Hzonline.LONMN = cell2mat(rawNumericColumns(:, 17));
BaseAlloy1Hzonline.LONSS = cell2mat(rawNumericColumns(:, 18));
BaseAlloy1Hzonline.HGTm = cell2mat(rawNumericColumns(:, 19));

